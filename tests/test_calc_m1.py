import pytest

# Импорты из твоей реализации
from src.calc_m1 import (
    calculate_expression,
    ParseError,
    EvalError,
)


# ---------- ПОЛОЖИТЕЛЬНЫЕ КЕЙСЫ ----------

@pytest.mark.parametrize(
    "expr, expected",
    [
        # Базовые числа и пробелы
        ("0", 0),
        ("42", 42),
        ("  7   ", 7),
        ("3.14", 3.14),
        ("12345", 12345),

        # Унарные + и -
        ("+5", 5),
        ("-5", -5),
        ("--5", 5),
        ("---5", -5),
        ("+-+-5", 5),
        ("-(3)", -3),
        ("+(3)", 3),

        # Скобки
        ("(1+2)*3", 9),
        ("((2))", 2),
        ("(2+3)*(4-1)", 15),
        ("-(2+3)", -5),

        # Приоритет и ассоциативность
        ("2+3*4", 14),          # * выше, чем +
        ("(2+3)*4", 20),
        ("20-3-4", 13),         # левая ассоц.: (20-3)-4
        ("8/4/2", 1.0),         # левая ассоц.: (8/4)/2
        ("2**3**2", 512),       # правая ассоц.: 2**(3**2)
        ("-2**2", 4),
        ("(-2)**2", 4),

        # *, /, //, %
        ("7/2", 3.5),
        ("8/4", 2.0),
        ("7//2", 3),
        ("8//4", 2),
        ("7%3", 1),
        ("14%7", 0),

        # Смешанные типы (где разрешено)
        ("2+3.0", 5.0),
        ("2*3.5", 7.0),
        ("10/5", 2.0),
        ("-(1.5)", -1.5),

        # Пробелы везде
        ("  1  +   2 *  3 ", 7),
        ("(  2+3 ) * ( 4 - 1 )", 15),

        # Краевые значения
        ("0**0", 1),
        ("2**0", 1),
        ("0**5", 0),
    ],
)
def test_positive_expressions(expr, expected):
    assert calculate_expression(expr) == expected


# ---------- НЕГАТИВНЫЕ КЕЙСЫ: СИНТАКСИС/ЛЕКСЕР ----------

@pytest.mark.parametrize(
    "expr",
    [
        "",            # пустая строка
        "   ",         # только пробелы
        ".",           # запрещён формат
        ".5",          # по правилам .5 не поддерживается
        "12.",         # нет цифры после точки
        "1..2",
        "1 2",         # лишние токены
        "()",          # пусто внутри скобок
        "(1+2",        # нет закрывающей
        "1+)",         # лишняя закрывающая
        "1+",          # обрыв выражения
        "*2",          # начало с бинарного оператора
        "2**",         # обрыв после **
        "2***3",       # некорректная комбинация *
        "2//",         # обрыв после //
        "2%%3",        # неизвестный оператор %%
        "2$3",         # неизвестный символ
    ],
)
def test_parse_errors(expr):
    with pytest.raises(ParseError):
        calculate_expression(expr)


# ---------- НЕГАТИВНЫЕ КЕЙСЫ: ВЫЧИСЛЕНИЕ/СЕМАНТИКА ----------

@pytest.mark.parametrize(
    "expr",
    [
        "1/0",     # деление на ноль
        "1//0",
        "1%0",
        "1//2.0",  # // только для целых
        "1.0//2",
        "1%2.0",   # % только для целых
        "1.0%2",
    ],
)
def test_eval_errors(expr):
    with pytest.raises(EvalError):
        calculate_expression(expr)
